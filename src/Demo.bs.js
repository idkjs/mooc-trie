// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Prelude$MoocTrie = require("./Prelude.bs.js");

function children_from_char(_m, c) {
  while(true) {
    var m = _m;
    if (!m) {
      return ;
    }
    var match = m.hd;
    if (Caml_obj.caml_equal(match[0], c)) {
      return Caml_option.some(match[1]);
    }
    _m = m.tl;
    continue ;
  };
}

function update_children(m, c, t) {
  if (children_from_char(m, c) === undefined) {
    return Pervasives.$at(m, {
                hd: [
                  c,
                  t
                ],
                tl: /* [] */0
              });
  }
  var help = function (ml) {
    if (!ml) {
      return /* [] */0;
    }
    var xs = ml.tl;
    var match = ml.hd;
    var c$prime = match[0];
    if (Caml_obj.caml_equal(c$prime, c)) {
      return {
              hd: [
                c,
                t
              ],
              tl: xs
            };
    } else {
      return {
              hd: [
                c$prime,
                match[1]
              ],
              tl: help(xs)
            };
    }
  };
  return help(m);
}

function lookup(trie, w) {
  var _t = trie;
  var _idx = 0;
  while(true) {
    var idx = _idx;
    var t = _t;
    if (idx === w.length) {
      return t._0;
    }
    var t$prime = children_from_char(t._1, Caml_string.get(w, idx));
    if (t$prime === undefined) {
      return ;
    }
    _idx = idx + 1 | 0;
    _t = t$prime;
    continue ;
  };
}

function insert(trie, w, v) {
  var slen = w.length;
  var m = trie._1;
  if (slen === 0) {
    return /* Trie */{
            _0: v,
            _1: m
          };
  }
  var v$prime = trie._0;
  var c = Caml_string.get(w, 0);
  var s = $$String.sub(w, 1, slen - 1 | 0);
  var ot = children_from_char(m, c);
  if (ot !== undefined) {
    return /* Trie */{
            _0: v$prime,
            _1: update_children(m, c, insert(ot, s, v))
          };
  } else {
    return /* Trie */{
            _0: v$prime,
            _1: update_children(m, c, insert(Prelude$MoocTrie.empty, s, v))
          };
  }
}

function insert2(trie, w, v) {
  var len = w.length;
  var help = function (ctc, pos) {
    var ch = Caml_string.get(w, pos);
    var t = children_from_char(ctc, ch);
    if (t !== undefined) {
      var ctc$prime = t._1;
      if (pos === (len - 1 | 0)) {
        return update_children(ctc, ch, /* Trie */{
                    _0: v,
                    _1: ctc$prime
                  });
      } else {
        return update_children(ctc, ch, /* Trie */{
                    _0: t._0,
                    _1: help(ctc$prime, pos + 1 | 0)
                  });
      }
    }
    var loop = function (i) {
      if (i === (len - 1 | 0)) {
        return {
                hd: [
                  Caml_string.get(w, i),
                  /* Trie */{
                    _0: v,
                    _1: /* [] */0
                  }
                ],
                tl: /* [] */0
              };
      } else {
        return {
                hd: [
                  Caml_string.get(w, i),
                  /* Trie */{
                    _0: undefined,
                    _1: loop(i + 1 | 0)
                  }
                ],
                tl: /* [] */0
              };
      }
    };
    if (pos === (len - 1 | 0)) {
      return update_children(ctc, ch, /* Trie */{
                  _0: v,
                  _1: /* [] */0
                });
    } else {
      return update_children(ctc, ch, /* Trie */{
                  _0: undefined,
                  _1: loop(1 + pos | 0)
                });
    }
  };
  var ctc = trie._1;
  if (len === 0) {
    return /* Trie */{
            _0: v,
            _1: ctc
          };
  } else {
    return /* Trie */{
            _0: trie._0,
            _1: help(ctc, 0)
          };
  }
}

exports.children_from_char = children_from_char;
exports.update_children = update_children;
exports.lookup = lookup;
exports.insert = insert;
exports.insert2 = insert2;
/* No side effect */
